---
const useCases = [
  {
    title: 'Data Analysts & Business Analysts',
    icon: 'üìä',
    description: 'Build and deploy data products faster with our intuitive interface and automated workflows.',
    valueProps: [
      'Ingest Zoom and Gong calls without writing code ‚Äî no dependency on data engineers.',
      'Get structured AI outputs instantly ‚Äî topics, sentiment, objections, competitor mentions.',
      'Works with your stack ‚Äî BigQuery, Snowflake, Redshift, dbt, Looker, SQL.',
      'Query call data like CRM or product data ‚Äî finally make unstructured data explorable.',
      'Cost-efficient and cloud-native ‚Äî no surprise AI infra bills.'
    ]
  },
  {
    title: 'RevOps & SalesOps',
    icon: 'üìà',
    description: 'Get real-time insights into your sales and revenue data with our powerful analytics tools.',
    valueProps: [
      'Track objections across the pipeline ‚Äî pricing, features, compliance, integrations.',
      'Measure rep performance ‚Äî objection handling, customer talk time, win-rate patterns.',
      'Forecast with confidence ‚Äî spot risk signals and expansion momentum from calls.',
      'Build deal health scores ‚Äî use real call data, not just CRM fields.'
    ]
  },
  {
    title: 'Customer Success',
    icon: 'ü§ù',
    description: 'Understand your customers better with our comprehensive customer data platform.',
    valueProps: [
      'Detect churn risk early ‚Äî based on pricing concerns, product complaints, or sentiment drops.',
      'Monitor CSM performance at scale ‚Äî objection resolution, conversation tone, consistency.',
      'Flag key risk metrics per account ‚Äî objections, unresolved concerns, escalations, competitor mentions.'
    ]
  },
  {
    title: 'Product & Engineering',
    icon: 'üß™',
    description: 'Make data-driven decisions with our product analytics and experimentation platform.',
    valueProps: [
      'Identify top feature requests ‚Äî straight from sales and CS calls.',
      'Connect call insights to usage and account data ‚Äî see whos saying what and why it matters.',
      'Understand segments better ‚Äî analyze requests and pain points by region, industry, or tier.',
      'Catch onboarding friction early ‚Äî before it becomes a support issue.'
    ]
  }
];
---

<section id="use-cases" class="use-cases-section">
  <div class="container">
    <h2>USE CASES</h2>
    <h3>
      Built for analysts.<br/>
      Loved by ops, product, and revenue teams.
    </h3>

    <div class="use-cases-accordion">
      {useCases.map((useCase) => {
        return (
          <div class="use-case-item">
            <button class="use-case-header" aria-expanded="false">
              <div class="use-case-header-content">
                <h4>{useCase.title}</h4>
                <span class="use-case-description">{useCase.description}</span>
              </div>
              <span class="accordion-icon">+</span>
            </button>
            <div class="use-case-content" style="max-height: 0;">
              <ul class="value-props-list">
                {useCase.valueProps.map((prop) => {
                  return <li>{prop}</li>;
                })}
              </ul>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</section>

<style>
  .use-cases-section {
    padding: 4rem 2rem;
    background: #1a1b26;
    color: #E4D6F5;
    text-align: center;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: rgba(228, 214, 245, 0.6);
    letter-spacing: 0.02em;
    text-align: center;
  }

  h3 {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 2rem;
    line-height: 1.2;
    color: #E4D6F5;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
  }

  .use-cases-accordion {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 700px;
    margin: 2rem auto 0;
  }

  .use-case-item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  .use-case-header {
    width: 100%;
    display: flex;
    align-items: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: none;
    cursor: pointer;
    color: #E4D6F5;
    text-align: left;
  }

  .use-case-header-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    flex: 1;
  }

  .use-case-header-content h4 {
    margin: 0;
    font-size: 1.35rem;
    font-weight: 700;
    color: #E4D6F5;
  }

  .use-case-header-content .use-case-description {
    color: #bcb8d8;
    font-size: 1.08rem;
    margin-top: 0.25rem;
    font-weight: 400;
    opacity: 0.8;
  }

  .accordion-icon {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }

  .use-case-header[aria-expanded="true"] .accordion-icon {
    transform: rotate(45deg);
  }

  .use-case-content {
    padding: 0;
    overflow: hidden;
    transition: all 0.3s ease;
    text-align: left;
  }

  .use-case-header[aria-expanded="true"] + .use-case-content {
    padding: 1.5rem 2rem 2rem 2rem;
  }

  .value-props-list {
    list-style: none;
    padding: 0;
    margin: 0;
    text-align: left;
  }

  .value-props-list li {
    color: #B3acf2;
    opacity: 0.8;
    margin-bottom: 1.5rem;
    padding-left: 2rem;
    position: relative;
    font-size: 1.15rem;
    line-height: 1.5;
    text-align: left;
  }

  .value-props-list li:last-child {
    margin-bottom: 0;
  }

  .value-props-list li:before {
    content: "‚Ä¢";
    position: absolute;
    left: 0.75rem;
    color: #B3acf2;
    opacity: 0.8;
    font-size: 1.2rem;
  }

  @media (max-width: 768px) {
    h3 {
      font-size: 2rem;
    }
  }
</style>

<script>
  // Wait for the DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.use-case-header').forEach(button => {
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', !expanded);
        
        // Toggle the content visibility
        const content = button.nextElementSibling;
        if (content) {
          content.style.maxHeight = expanded ? '0' : content.scrollHeight + 'px';
        }
      });
    });
  });
</script>