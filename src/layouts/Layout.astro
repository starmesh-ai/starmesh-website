---
interface Props {
	title: string;
	description?: string;
}

const { title, description = "StarMesh - Simplifying Data Mesh Implementation" } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<link rel="icon" type="image/png" href="/images/starmesh-logo-purple.png" />
		<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;500;700&display=swap" rel="stylesheet">
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

	/* Base styles */
	body {
		font-family: 'Lato', sans-serif;
		margin: 0;
		padding: 0;
		letter-spacing: 0.5px;
		background-color: #2B2D3E;
		color: #E4D6F5;
		min-height: 100vh;
		overflow-x: hidden;
	}

	/* Star animation styles */
	.stars-container {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 0;
		overflow: hidden;
	}

	.star {
		position: absolute;
		background-color: white;
		clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
		z-index: 0;
	}

	@keyframes twinkle {
		0% { opacity: 0.3; }
		50% { opacity: 0.8; }
		100% { opacity: 0.3; }
	}

	@keyframes move {
		0% { transform: translate(0, 0); }
		100% { transform: translate(10px, 10px); }
	}

	/* Hero section styles */
	.hero-section {
		position: relative;
		min-height: calc(100vh - 60px);
		padding: 60px 20px;
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		overflow: hidden;
	}

	.hero-section h1 {
		font-size: clamp(2em, 5vw, 3.5em);
		font-weight: 500;
		margin: 1rem 0;
		position: relative;
		z-index: 1;
	}

	.hero-section p {
		font-size: clamp(1.2em, 3vw, 1.5em);
		color: #B3acf2;
		max-width: 800px;
		margin: 1rem auto;
		position: relative;
		z-index: 1;
	}

	/* How it works section */
	.how-it-works {
		position: relative;
		padding: 4rem 1rem;
		z-index: 1;
	}

	.tab-content {
		background: rgba(255, 255, 255, 0.05);
		border-radius: 1rem;
		padding: 2rem;
		margin-top: 2rem;
	}

	.tab-button {
		font-size: 1.1em;
		padding: 0.75rem 1.5rem;
		border-radius: 0.5rem;
		background: rgba(147, 51, 234, 0.5);
		color: white;
		border: none;
		cursor: pointer;
		transition: background-color 0.3s;
	}

	.tab-button.active {
		background: rgb(147, 51, 234);
	}

	.tab-button:hover {
		background: rgb(147, 51, 234);
	}
</style>

<script>
	function createStars(container: Element, numberOfStars: number) {
		container.innerHTML = '';
		for (let i = 0; i < numberOfStars; i++) {
			const star = document.createElement('div');
			star.classList.add('star');

			// Randomize position
			const randomX = Math.random() * 100;
			const randomY = Math.random() * 100;
			star.style.left = `${randomX}vw`;
			star.style.top = `${randomY}vh`;

			// Randomize size (adjusted to be bigger)
			const randomSize = Math.random() * (8 - 4) + 4;
			star.style.width = `${randomSize}px`;
			star.style.height = `${randomSize}px`;

			// Randomize animation
			const randomDelay = Math.random() * 3;
			const randomDuration = Math.random() * 2 + 1;
			star.style.animation = `twinkle 1.5s infinite alternate ${randomDelay}s, move ${randomDuration}s infinite alternate ${randomDelay}s`;

			container.appendChild(star);
		}
	}

	// Create stars when the document is loaded
	document.addEventListener('DOMContentLoaded', () => {
		const containers = document.querySelectorAll('.stars-container');
		containers.forEach(container => {
			createStars(container, 150);
		});
	});
</script>
